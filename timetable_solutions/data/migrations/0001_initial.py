# Generated by Django 4.2 on 2023-04-24 06:43

# Django imports
import django.db.models.deletion
import django.db.models.expressions
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Classroom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("classroom_id", models.IntegerField()),
                ("building", models.CharField(max_length=20)),
                ("room_number", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "school_access_key",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("school_name", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="YearGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year_group_id", models.IntegerField()),
                ("year_group_name", models.CharField(max_length=20)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="data.school"
                    ),
                ),
            ],
            options={
                "ordering": ["year_group_id"],
            },
        ),
        migrations.CreateModel(
            name="TimetableSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slot_id", models.IntegerField()),
                (
                    "day_of_week",
                    models.SmallIntegerField(
                        choices=[
                            (1, "Monday"),
                            (2, "Tuesday"),
                            (3, "Wednesday"),
                            (4, "Thursday"),
                            (5, "Friday"),
                            (6, "Saturday"),
                            (7, "Sunday"),
                        ]
                    ),
                ),
                ("starts_at", models.TimeField()),
                ("ends_at", models.TimeField()),
                (
                    "relevant_year_groups",
                    models.ManyToManyField(related_name="slots", to="data.yeargroup"),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="data.school"
                    ),
                ),
            ],
            options={
                "ordering": ["day_of_week", "starts_at"],
            },
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("teacher_id", models.IntegerField()),
                ("firstname", models.CharField(max_length=20)),
                ("surname", models.CharField(max_length=20)),
                ("title", models.CharField(max_length=10)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="data.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Pupil",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pupil_id", models.IntegerField()),
                ("firstname", models.CharField(max_length=20)),
                ("surname", models.CharField(max_length=20)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="data.school"
                    ),
                ),
                (
                    "year_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pupils",
                        to="data.yeargroup",
                    ),
                ),
            ],
            options={
                "ordering": ["surname", "firstname"],
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.IntegerField(
                        choices=[(1, "Administrator"), (2, "Teacher"), (3, "Pupil")],
                        default=1,
                    ),
                ),
                ("approved_by_school_admin", models.BooleanField(default=False)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="data.school"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lesson_id", models.CharField(max_length=20)),
                ("subject_name", models.CharField(max_length=20)),
                ("total_required_slots", models.PositiveSmallIntegerField()),
                ("total_required_double_periods", models.PositiveSmallIntegerField()),
                (
                    "classroom",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="lessons",
                        to="data.classroom",
                    ),
                ),
                (
                    "pupils",
                    models.ManyToManyField(related_name="lessons", to="data.pupil"),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="data.school"
                    ),
                ),
                (
                    "solver_defined_time_slots",
                    models.ManyToManyField(
                        related_name="solver_lessons", to="data.timetableslot"
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="lessons",
                        to="data.teacher",
                    ),
                ),
                (
                    "user_defined_time_slots",
                    models.ManyToManyField(
                        related_name="user_lessons", to="data.timetableslot"
                    ),
                ),
                (
                    "year_group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="lessons",
                        to="data.yeargroup",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="classroom",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="data.school"
            ),
        ),
        migrations.CreateModel(
            name="Break",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("break_id", models.CharField(max_length=20)),
                ("break_name", models.CharField(max_length=20)),
                (
                    "day_of_week",
                    models.SmallIntegerField(
                        choices=[
                            (1, "Monday"),
                            (2, "Tuesday"),
                            (3, "Wednesday"),
                            (4, "Thursday"),
                            (5, "Friday"),
                            (6, "Saturday"),
                            (7, "Sunday"),
                        ]
                    ),
                ),
                ("starts_at", models.TimeField()),
                ("ends_at", models.TimeField()),
                (
                    "relevant_year_groups",
                    models.ManyToManyField(related_name="breaks", to="data.yeargroup"),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="data.school"
                    ),
                ),
                (
                    "teachers",
                    models.ManyToManyField(related_name="breaks", to="data.teacher"),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="yeargroup",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("year_group_id"),
                name="year_group_id_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="yeargroup",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("year_group_name"),
                name="year_group_name_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="timetableslot",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("slot_id"),
                name="slot_id_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="timetableslot",
            constraint=models.CheckConstraint(
                check=models.Q(("starts_at__lt", models.F("ends_at"))),
                name="slot_ends_after_it_starts",
            ),
        ),
        migrations.AddConstraint(
            model_name="teacher",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("teacher_id"),
                name="teacher_id_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="pupil",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("pupil_id"),
                name="pupil_id_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="lesson",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("lesson_id"),
                name="lesson_id_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="lesson",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "total_required_slots__gte",
                        django.db.models.expressions.CombinedExpression(
                            models.F("total_required_double_periods"),
                            "*",
                            models.Value(2),
                        ),
                    )
                ),
                name="number_of_double_period_slots_cannot_exceed_total_required_slots",
            ),
        ),
        migrations.AddConstraint(
            model_name="classroom",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("classroom_id"),
                name="classroom_id_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="classroom",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("building"),
                models.F("room_number"),
                name="classroom_building_room_number_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="break",
            constraint=models.UniqueConstraint(
                models.F("school"),
                models.F("break_id"),
                name="break_id_unique_for_school",
            ),
        ),
        migrations.AddConstraint(
            model_name="break",
            constraint=models.CheckConstraint(
                check=models.Q(("starts_at__lt", models.F("ends_at"))),
                name="break_ends_after_it_starts",
            ),
        ),
    ]
